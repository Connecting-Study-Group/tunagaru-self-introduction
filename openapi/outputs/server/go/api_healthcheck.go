/*
 * tsunagaru
 *
 * tsunagaru
 *
 * API version: 1.0
 * Contact: codeyy021@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// HealthcheckApiController binds http requests to an api service and writes the service results to the http response
type HealthcheckApiController struct {
	service HealthcheckApiServicer
	errorHandler ErrorHandler
}

// HealthcheckApiOption for how the controller is set up.
type HealthcheckApiOption func(*HealthcheckApiController)

// WithHealthcheckApiErrorHandler inject ErrorHandler into controller
func WithHealthcheckApiErrorHandler(h ErrorHandler) HealthcheckApiOption {
	return func(c *HealthcheckApiController) {
		c.errorHandler = h
	}
}

// NewHealthcheckApiController creates a default api controller
func NewHealthcheckApiController(s HealthcheckApiServicer, opts ...HealthcheckApiOption) Router {
	controller := &HealthcheckApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the HealthcheckApiController
func (c *HealthcheckApiController) Routes() Routes {
	return Routes{ 
		{
			"GetHealthcheck",
			strings.ToUpper("Get"),
			"/healthcheck",
			c.GetHealthcheck,
		},
	}
}

// GetHealthcheck - healthcheck
func (c *HealthcheckApiController) GetHealthcheck(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetHealthcheck(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
