/*
 * tsunagaru
 *
 * tsunagaru
 *
 * API version: 1.0
 * Contact: codeyy021@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type User struct {

	Id string `json:"id"`

	Name string `json:"name"`

	Bio string `json:"bio,omitempty"`

	IconImageUrl string `json:"icon_image_url"`

	Status string `json:"status,omitempty"`

	CreatedAt time.Time `json:"created_at,omitempty"`

	UpdatedAt time.Time `json:"updated_at,omitempty"`

	TwitterUrl string `json:"twitter_url,omitempty"`

	GithubUrl string `json:"github_url,omitempty"`

	InstagramUrl string `json:"instagram_url,omitempty"`

	WebUrl string `json:"web_url,omitempty"`

	ZennUrl string `json:"zenn_url,omitempty"`

	QiitaUrl string `json:"qiita_url,omitempty"`
}

// AssertUserRequired checks if the required fields are not zero-ed
func AssertUserRequired(obj User) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"name": obj.Name,
		"icon_image_url": obj.IconImageUrl,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseUserRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of User (e.g. [][]User), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUser, ok := obj.(User)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUserRequired(aUser)
	})
}
