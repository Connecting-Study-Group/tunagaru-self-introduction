// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWUW/cRBD+K9XAoxtfA4jgJ6gC0kkgJKQ8lSjas+fsTezd7e667XE6KbZVVDgQUgSp",
	"Sh+oUFVSolaBVgiJlv6Y5ZL2X6Bd3+WanP3QCB56LzeamZ2d+eab8Q4h5JngDJlWEAxB4uUclb7II4pO",
	"sSYionFNofysNlllyJlG5kQiREpDoiln/qbizOpUmGBGrCQkFyj1NFaPcvunBwIhAKUlZTGMPJcCYYNG",
	"G2aEpo2WmOok723kstlMQ842aEZibHdhSpNYkqzVY5P3GvWMZNhouEypJq3hlCY6d1BEqEJJhYUNAjDV",
	"D6Z6YKpHprphyj0nfDUVyj9NNTblz6b41RT3TfFwQb9nipumuPf8/qOjxweH1fXJnd/AW7xcX6Vao2xN",
	"7iq2g/kFMtZiHB1fxXubGGoY2Z8HEpXgTC2yqFa/Eo3elNiHAN7w52T1a6vybVBwN57E9MNrJBMpnpvl",
	"4TKdHnIp2XP/CUVDiURjtEFcJX0uMyuBrfi8phk2NeN/pXV0Rra/BqxGlmcQXIKPpONOBB5cJOFWLX3C",
	"ezS1cH/QBQ+6rC8JePCpTlDC+hkmIq+RPFnVKlUhl5GtrDww5V2btc30pxc/3jbF/uS73cnfN03xiym+",
	"NeW4u2rKHbNdrK11V49rOrr114tvfjfFLVOOm8iRu2l5NUKdfXrtyqcSIwsrtTA6GtTVz4hq0aM6tSfd",
	"3JyeeQ+unVeai5TGiUvaIgfZ1rth0k/jPhdsC+q1QFmfz2afhM53OgsQ8ggHg87yhfdjq1kKeTbLJgCt",
	"ckZiInNYmPS5aZ7ly7orKFXteWGpY49zgYwICgG8tdRZWgYPBNGJY7CfK5TKH+Y0GrntQCTJUKNUEFwa",
	"ArVRrPM8sRqmOYha5ui9tLtOA77ubguTpnm5Z6onpvzDVE9qwpty5/D248Pdg5orNcP+efrs6Pu9WkME",
	"Ndvl5yynkSl3JtcrU+yb7cJUX9pI1a6p9k3x8Pmzp5Ov75hiPAs2ts437h7uPjgmoV2Cbv12befm+3pa",
	"W/0mGLQt4xPPBn/xzXD6e7Dc6bSHmvr5DR8Nt8PzLCNycDpLTWLbI7ANhHXHNYXyyqxzJ6H+mIckPVfb",
	"LdXtbECitQh8P7W2hCsdrHRWOmAbNo09PO65++ast7CevJ29t/LOykqC2SaMRv8GAAD//3GG35BjCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
